import time
import pytest
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import ElementClickInterceptedException

@pytest.mark.ui
def test_create_course_and_add_content():
    # ===== C·∫•u h√¨nh =====
    USERNAME = "admin"
    PASSWORD = "admin"
    URL = "http://learnpresshi.local/wp-admin"
    CREATE_COURSE_URL = "http://learnpresshi.local/wp-admin/post-new.php?post_type=lp_course"

    # ===== Setup ChromeDriver =====
    options = Options()
    options.add_argument("--start-maximized")
    service = Service()
    driver = webdriver.Chrome(service=service, options=options)
    wait = WebDriverWait(driver, 10)

    try:
        # ===== B∆∞·ªõc 1: ƒêƒÉng nh·∫≠p admin =====
        driver.get(URL)
        wait.until(EC.presence_of_element_located((By.ID, "user_login"))).send_keys(USERNAME)
        driver.find_element(By.ID, "user_pass").send_keys(PASSWORD)
        driver.find_element(By.ID, "wp-submit").click()
        time.sleep(2)
        print("‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng!")
        #  B∆∞·ªõc 2: V√†o trang danh s√°ch Question =====
        QUESTION_URL = "http://learnpresshi.local/wp-admin/post-new.php?post_type=lp_question"
        driver.get(QUESTION_URL)

        import random 
        # Vi·∫øt ti√™u ƒë·ªÅ question random ----
        random_number = random.randint(1000, 9999)  # S·ªë ng·∫´u nhi√™n 4 ch·ªØ s·ªë
        title_field = driver.find_element(By.ID, "title")
        title_field.send_keys(f"Question Selenium T·ª± ƒë·ªông {random_number}")
        print(f"‚úÖ ƒê√£ nh·∫≠p ti√™u ƒë·ªÅ: Question Selenium T·ª± ƒë·ªông {random_number}")


        # ---- Vi·∫øt m√¥ t·∫£ question ----
        driver.switch_to.frame(driver.find_element(By.ID, "content_ifr"))  # Chuy·ªÉn v√†o iframe m√¥ t·∫£
        body = driver.find_element(By.ID, "tinymce")
        body.send_keys("ƒê√¢y l√† m√¥ t·∫£ t·ª± ƒë·ªông cho question Selenium.")
        driver.switch_to.default_content()

        # ---- Click n√∫t Publish ----
        publish_btn = driver.find_element(By.ID, "publish")
        publish_btn.click()

        time.sleep(3)
        print("‚úÖ TaÃ£o question th√†nh c√¥ng!")


        from selenium.webdriver import ActionChains
        import random

        # ===== Hover v√†o .question-types =====
        question_types_element = wait.until(
            EC.presence_of_element_located((By.CSS_SELECTOR, ".question-types"))
        )
        driver.execute_script("arguments[0].scrollIntoView(true);", question_types_element)
        ActionChains(driver).move_to_element(question_types_element).perform()
        print("‚úÖ ƒê√£ hover v√†o 'question-types'.")

        # ===== Ch·ªù 4 <li> type xu·∫•t hi·ªán =====
        type_items = wait.until(
            EC.presence_of_all_elements_located((
                By.CSS_SELECTOR,
                '.question-types li[data-type="true_or_false"], '
                '.question-types li[data-type="multi_choice"], '
                '.question-types li[data-type="single_choice"], '
                '.question-types li[data-type="fill_in_blanks"]'
            ))
        )

        # ===== Random ch·ªçn 1 type v√† click v√†o <a> b√™n trong =====
        chosen_li = random.choice(type_items)
        type_name = chosen_li.get_attribute("data-type")
        a_tag = chosen_li.find_element(By.TAG_NAME, "a")
        driver.execute_script("arguments[0].click();", a_tag)
        print(f"üìù ƒê√£ click ch·ªçn lo·∫°i c√¢u h·ªèi: {type_name}")
        time.sleep(5)

        # ===== Scroll xu·ªëng ph·∫ßn question_settings =====
        question_settings = wait.until(
            EC.presence_of_element_located((By.ID, "question_settings"))
        )
        driver.execute_script("arguments[0].scrollIntoView(true);", question_settings)
        print("‚úÖ ƒê√£ k√©o xu·ªëng ph·∫ßn 'question_settings'.")

        # ===== ƒêi·ªÅn s·ªë random 1-10 v√†o _lp_mark =====
        mark_input = wait.until(EC.presence_of_element_located((By.ID, "_lp_mark")))
        random_mark = random.randint(1, 10)
        mark_input.clear()
        mark_input.send_keys(str(random_mark))
        print(f"‚úÖ ƒê√£ nh·∫≠p ƒëi·ªÉm: {random_mark}")
        mark_input.clear()
        mark_input.send_keys(str(random_mark))
        driver.execute_script("""
        arguments[0].dispatchEvent(new Event('input', { bubbles: true }));
        arguments[0].dispatchEvent(new Event('change', { bubbles: true }));
        """, mark_input)

        # ===== T√¨m v√† ƒëi·ªÅn Hint Question (random) =====
        hint_field_wrapper = wait.until(
            EC.presence_of_element_located((By.CSS_SELECTOR, ".form-field._lp_hint_field"))
        )
        hint_textarea = hint_field_wrapper.find_element(By.ID, "_lp_hint")
        hint_textarea.clear()
        random_hint_number = random.randint(100, 999)
        hint_textarea.send_keys(f"G·ª£i √Ω s·ªë {random_hint_number} cho c√¢u h·ªèi Selenium.")
        print(f"‚úÖ ƒê√£ nh·∫≠p hint: G·ª£i √Ω s·ªë {random_hint_number} cho c√¢u h·ªèi Selenium.")

        # ===== T√¨m v√† ƒëi·ªÅn Explanation Question (random) =====
        explanation_textarea = wait.until(
            EC.presence_of_element_located((By.ID, "_lp_explanation"))
        )
        explanation_textarea.clear()
        random_explanation_number = random.randint(100, 999)
        explanation_textarea.send_keys(f"Gi·∫£i th√≠ch s·ªë {random_explanation_number} cho c√¢u h·ªèi Selenium.")
        print(f"‚úÖ ƒê√£ nh·∫≠p explanation: Gi·∫£i th√≠ch s·ªë {random_explanation_number} cho c√¢u h·ªèi Selenium.")



        # ===== Scroll t·ªõi n√∫t Update ƒë·ªÉ ƒë·∫£m b·∫£o n√≥ hi·ªÉn th·ªã =====
        update_btn = wait.until(EC.element_to_be_clickable((By.ID, "publish")))
        driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", update_btn)
        time.sleep(0.5)

        # ===== N·∫øu v·∫´n b·ªã che, click b·∫±ng JavaScript =====
        try:
            update_btn.click()
        except ElementClickInterceptedException:
            print("‚ö† N√∫t Update b·ªã che, click b·∫±ng JavaScript.")
            driver.execute_script("arguments[0].click();", update_btn)

        time.sleep(1)
        print("‚úÖ ƒê√£ click n√∫t Update.")

        

    finally:
        # ƒê√≥ng tr√¨nh duy·ªát sau v√†i gi√¢y
        time.sleep(5)
        driver.quit()