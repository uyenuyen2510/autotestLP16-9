import time
import pytest
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.keys import Keys

@pytest.mark.ui
def test_student_enroll_course():
    # ===== C·∫•u h√¨nh =====
    ADMIN_USERNAME = "admin"
    ADMIN_PASSWORD = "admin"
    STUDENT_USERNAME = "student1"
    STUDENT_PASSWORD = "student1"
    URL = "http://learnpresshi.local/wp-admin"
    COURSE_URL = "http://learnpresshi.local/wp-admin/edit.php?post_type=lp_course"

    # ===== Setup ChromeDriver =====
    options = Options()
    options.add_argument("--start-maximized")
    service = Service()
    driver = webdriver.Chrome(service=service, options=options)
    wait = WebDriverWait(driver, 10)

    try:
        # ===== B∆∞·ªõc 1: ƒêƒÉng nh·∫≠p admin =====
        driver.get(URL)
        wait.until(EC.presence_of_element_located((By.ID, "user_login"))).send_keys(ADMIN_USERNAME)
        driver.find_element(By.ID, "user_pass").send_keys(ADMIN_PASSWORD)
        driver.find_element(By.ID, "wp-submit").click()
        time.sleep(2)
        print("‚úÖ ƒêƒÉng nh·∫≠p admin th√†nh c√¥ng!")

        # ===== V√†o danh s√°ch kh√≥a h·ªçc =====
        driver.get("http://learnpresshi.local/wp-admin/edit.php?post_type=lp_course")
        time.sleep(2)
        
        # =====  T·∫°o kh√≥a h·ªçc m·ªõi =====
        CREATE_COURSE_URL = "http://learnpresshi.local/wp-admin/post-new.php?post_type=lp_course"
        driver.get(CREATE_COURSE_URL)
        time.sleep(2)

        # ---- Vi·∫øt ti√™u ƒë·ªÅ kh√≥a h·ªçc ----
        title_field = driver.find_element(By.ID, "title")
        title_field.send_keys("Kh√≥a h·ªçc Selenium T·ª± ƒë·ªông")

        # ---- Vi·∫øt m√¥ t·∫£ kh√≥a h·ªçc ----
        driver.switch_to.frame(driver.find_element(By.ID, "content_ifr"))  # Chuy·ªÉn v√†o iframe m√¥ t·∫£
        body = driver.find_element(By.ID, "tinymce")
        body.send_keys("ƒê√¢y l√† m√¥ t·∫£ t·ª± ƒë·ªông cho kh√≥a h·ªçc Selenium.")
        driver.switch_to.default_content()

        # ---- Click n√∫t Publish ----
        publish_btn = driver.find_element(By.ID, "publish")
        publish_btn.click()

        time.sleep(3)
        print("‚úÖ T·∫°o kh√≥a h·ªçc th√†nh c√¥ng!")

        # ===== Scroll t·ªõi ph·∫ßn Curriculum =====
        curriculum = driver.find_element(By.ID, "lp-course-edit-curriculum")
        driver.execute_script("arguments[0].scrollIntoView(true);", curriculum)
        time.sleep(1)

        # ===== Nh·∫≠p t√™n Section =====
        section_title = "Ch∆∞∆°ng 1: Gi·ªõi thi·ªáu Selenium"
        new_section_input = curriculum.find_element(By.CLASS_NAME, "lp-section-title-new-input")
        new_section_input.click()
        new_section_input.send_keys(section_title)

        # ===== Click n√∫t Add Section =====
        add_btn = curriculum.find_element(By.CLASS_NAME, "lp-btn-add-section")
        add_btn.click()
        time.sleep(2)

        # ===== T√¨m ph·∫ßn section-content m·ªõi ƒë∆∞·ª£c th√™m =====
        section_contents = driver.find_elements(By.CLASS_NAME, "section-content")
        last_section_content = section_contents[-1]  # l·∫•y section m·ªõi nh·∫•t

        # ===== ƒêi·ªÅn m√¥ t·∫£ v√†o class="lp-section-description-input" =====
        description_input = last_section_content.find_element(By.CLASS_NAME, "lp-section-description-input")
        driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", description_input)
        wait.until(EC.visibility_of(description_input))
        description_input.clear()
        description_input.send_keys("ƒê√¢y l√† ph·∫ßn m√¥ t·∫£ chi ti·∫øt cho Ch∆∞∆°ng 1.")
        description_input.send_keys(Keys.ENTER)  # ‚èé Enter ƒë·ªÉ l∆∞u m√¥ t·∫£
        print("‚úÖ ƒê√£ ƒëi·ªÅn m√¥ t·∫£ v√† nh·∫•n Enter.")
        time.sleep(10)

        # ===== X√°c ƒë·ªãnh section m·ªõi nh·∫•t =====
        last_section = driver.find_elements(By.CLASS_NAME, "section")[-1]  # l·∫•y section m·ªõi nh·∫•t

        # ===== T√¨m n√∫t Add Lesson b√™n trong section n√†y =====
        lesson_button = last_section.find_element(
            By.CSS_SELECTOR, ".section-actions button.lp-btn-select-item-type[data-item-type='lp_lesson']"
        )

        # ===== Cu·ªôn v√† click =====
        driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", lesson_button)
        wait.until(EC.element_to_be_clickable(lesson_button))
        lesson_button.click()
        print("‚úÖ ƒê√£ click v√†o n√∫t Add Lesson trong section v·ª´a t·∫°o.")
        time.sleep(2)

        # ===== Ch·ªù √¥ nh·∫≠p title xu·∫•t hi·ªán trong section m·ªõi =====
        lesson_title_input = wait.until(
            EC.visibility_of(last_section.find_element(By.CLASS_NAME, "lp-add-item-type-title-input"))
        )
        lesson_title_input.clear()
        lesson_title_input.send_keys("B√†i h·ªçc gi·ªõi thi·ªáu Selenium")
        lesson_title_input.send_keys(Keys.ENTER)
        print("‚úÖ ƒê√£ t·∫°o Lesson v·ªõi ti√™u ƒë·ªÅ.")
        time.sleep(2)

                # ===== B∆∞·ªõc 3.5: C·∫•u h√¨nh course settings =====
        course_settings = driver.find_element(By.ID, "course-settings")
        driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", course_settings)
        time.sleep(2)

        # ---- Checkbox "Block Expire Duration" (#_lp_block_expire_duration) ----
        block_expire_checkbox = driver.find_element(By.ID, "_lp_block_expire_duration")
        if not block_expire_checkbox.is_selected():
            driver.execute_script("arguments[0].click();", block_expire_checkbox)

            print("‚úÖ ƒê√£ b·∫≠t Block Expire Duration")
        else:
            print("‚ÑπÔ∏è Block Expire Duration ƒë√£ ƒë∆∞·ª£c b·∫≠t s·∫µn")

        # ---- Checkbox "Block Finished" (#_lp_block_finished) ----
        block_finished_checkbox = driver.find_element(By.ID, "_lp_block_finished")
        if block_finished_checkbox.is_selected():
            block_finished_checkbox.click()
            print("‚úÖ ƒê√£ t·∫Øt Block Finished")
        else:
            print("‚ÑπÔ∏è Block Finished ƒë√£ t·∫Øt s·∫µn")

        time.sleep(2)

        # ===== ƒêi·ªÅn gi√° tr·ªã duration =====
        duration_input = driver.find_element(By.ID, "_lp_duration")
        duration_input.clear()
        duration_input.send_keys("1")  # ƒëi·ªÅn 1

        # ===== Ch·ªçn Minute(s) trong select =====
        from selenium.webdriver.support.ui import Select

        duration_select = Select(driver.find_element(By.CSS_SELECTOR, "select.lp-meta-box__duration-select"))
        duration_select.select_by_value("minute")  # ch·ªçn Minute(s)

        print("‚úÖ ƒê√£ thi·∫øt l·∫≠p duration = 1 Minute")


        # ---- L∆∞u thay ƒë·ªïi b·∫±ng Update course ----
        update_btn = driver.find_element(By.ID, "publish")
        driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", update_btn)
        update_btn.click()
        print("üíæ ƒê√£ l∆∞u l·∫°i course settings")
        time.sleep(3)

         # ===== B∆∞·ªõc 4: Click ‚ÄúView Course‚Äù ·ªü admin bar =====
        view_course_link = wait.until(
            EC.element_to_be_clickable((By.CSS_SELECTOR, "#wp-admin-bar-view a"))
        )
        view_course_link.click()
        print("‚úÖ ƒê√£ m·ªü trang View Course (frontend)")

        # L∆∞u URL course frontend
        course_frontend_url = driver.current_url
        print(f"üëâ URL course frontend: {course_frontend_url}")

        # ===== B∆∞·ªõc 5: Logout admin tr∆∞·ªõc khi login student =====
        driver.get("http://learnpresshi.local/wp-login.php?action=logout")
        driver.get("http://learnpresshi.local/wp-login.php")
        time.sleep(5)

        # ===== B∆∞·ªõc 6: Login b·∫±ng student =====
        driver.get("http://learnpresshi.local/wp-login.php")  # ƒë·∫£m b·∫£o v·ªÅ trang login chu·∫©n

        username_input = wait.until(EC.element_to_be_clickable((By.ID, "user_login")))
        password_input = wait.until(EC.element_to_be_clickable((By.ID, "user_pass")))

        username_input.clear()
        password_input.clear()

        username_input.send_keys(STUDENT_USERNAME)

        # n·∫øu send_keys kh√¥ng ƒÉn th√¨ d√πng execute_script
        try:
            password_input.send_keys(STUDENT_PASSWORD)
        except:
            driver.execute_script("arguments[0].value = arguments[1];", password_input, STUDENT_PASSWORD)

        driver.find_element(By.ID, "wp-submit").click()
        time.sleep(2)
        print("‚úÖ ƒêƒÉng nh·∫≠p student th√†nh c√¥ng!")


        # ===== B∆∞·ªõc 7: Truy c·∫≠p l·∫°i course frontend ƒë√£ l∆∞u =====
        driver.get(course_frontend_url)

        # ===== B∆∞·ªõc 8: Click n√∫t ‚ÄúStart Now‚Äù =====
        start_btn = wait.until(
            EC.element_to_be_clickable((By.CSS_SELECTOR, "button.lp-button.button-enroll-course"))
        )
        start_btn.click()
        print("‚úÖ Student ƒë√£ click Start Now ƒë·ªÉ enroll course")

        # üëâ C√≥ th·ªÉ th√™m assert ki·ªÉm tra enroll th√†nh c√¥ng
        # V√≠ d·ª•: check xem xu·∫•t hi·ªán n√∫t "Continue" thay v√¨ "Start Now"
        try:
            wait.until(
                EC.presence_of_element_located((By.CSS_SELECTOR, "button.lp-button"))
            )
            print("üéâ Student ƒë√£ enroll th√†nh c√¥ng!")
        except:
            print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y n√∫t x√°c nh·∫≠n enroll.")
        time.sleep(60)

        # ===== B∆∞·ªõc 14: Click l·∫°i v√†o Lesson icon =====
        try:
            lesson_icon = wait.until(
                EC.element_to_be_clickable((By.CSS_SELECTOR, "span.course-item-ico.lp_lesson"))
            )
            lesson_icon.click()
            print("‚úÖ ƒê√£ click v√†o Lesson icon")
            time.sleep(2)

            # ===== B∆∞·ªõc 15: Ki·ªÉm tra th√¥ng b√°o protected content =====
            protected_message = wait.until(
                EC.presence_of_element_located((By.CSS_SELECTOR, "div.learn-press-message.learn-press-content-protected-message.error"))
            )

            if "The content of this item has been blocked because the course has exceeded its duration." in protected_message.text:
                print("üéâ Test Passed block content khi h√™ÃÅt duration: Sau khi ho√†n th√†nh, lesson hi·ªÉn th·ªã th√¥ng b√°o protected ƒë√∫ng!")
            else:
                pytest.fail("‚ùå Test Failed: Kh√¥ng hi·ªÉn th·ªã th√¥ng b√°o protected mong ƒë·ª£i.")

        except Exception as e:
            pytest.fail(f"‚ùå Test Failed: Kh√¥ng t√¨m th·∫•y th√¥ng b√°o protected. L·ªói: {e}")

        # ===== Click icon <i class="lp-icon-times"></i> =====
        close_icon = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, "i.lp-icon-times")))
        driver.execute_script("arguments[0].click();", close_icon)
        print("‚úÖ ƒê√£ click icon ƒë√≥ng (lp-icon-times).")
        time.sleep(2)

        # ===== Logout student =====
        driver.get("http://learnpresshi.local/wp-login.php?action=logout")
        time.sleep(2)

        # X√°c nh·∫≠n logout (n·∫øu c√≥ m√†n h√¨nh confirm)
        try:
            confirm_logout = wait.until(EC.element_to_be_clickable((By.LINK_TEXT, "log out")))
            confirm_logout.click()
            print("‚úÖ ƒê√£ x√°c nh·∫≠n logout student.")
        except:
            print("‚ö†Ô∏è Kh√¥ng th·∫•y m√†n h√¨nh confirm logout, c√≥ th·ªÉ ƒë√£ logout lu√¥n.")

        time.sleep(2)

        # ===== Login l·∫°i b·∫±ng admin =====
        driver.get("http://learnpresshi.local/wp-login.php")
        wait.until(EC.presence_of_element_located((By.ID, "user_login"))).send_keys(ADMIN_USERNAME)
        driver.find_element(By.ID, "user_pass").send_keys(ADMIN_PASSWORD)
        driver.find_element(By.ID, "wp-submit").click()
        print("‚úÖ ƒê√£ login l·∫°i b·∫±ng admin.")
        time.sleep(3)

        # ===== Sau khi login admin, m·ªü l·∫°i trang frontend c·ªßa course =====
        driver.get(course_frontend_url)
        time.sleep(3)

        # ===== Click v√†o "Edit Course" trong admin bar =====
        edit_course_btn = wait.until(EC.element_to_be_clickable((By.ID, "wp-admin-bar-edit")))
        edit_course_btn.click()
        print("‚úÖ ƒê√£ click Edit Course ƒë·ªÉ v√†o trang ch·ªânh s·ª≠a.")
        time.sleep(3)

        # ===== K√©o xu·ªëng ph·∫ßn Course Settings =====
        course_settings = wait.until(EC.presence_of_element_located((By.ID, "course-settings")))
        driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", course_settings)
        time.sleep(2)

        # ===== Checkbox "Block Expire Duration" (#_lp_block_expire_duration) =====
        block_expire_checkbox = driver.find_element(By.ID, "_lp_block_expire_duration")
        if block_expire_checkbox.is_selected():
            driver.execute_script("arguments[0].click();", block_expire_checkbox)
            print("‚úÖ ƒê√£ t·∫Øt checkbox Block Expire Duration")

        # ===== Checkbox "Block Finished" (#_lp_block_finished) =====
        block_finished_checkbox = driver.find_element(By.ID, "_lp_block_finished")
        if not block_finished_checkbox.is_selected():
            driver.execute_script("arguments[0].click();", block_finished_checkbox)
            print("‚úÖ ƒê√£ b·∫≠t checkbox Block Finished")

        time.sleep(2)

        # (Tu·ª≥ ch·ªçn) C·∫≠p nh·∫≠t l·∫°i course sau khi thay ƒë·ªïi setting
        update_btn = driver.find_element(By.ID, "publish")
        driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", update_btn)
        driver.execute_script("arguments[0].click();", update_btn)










        # ===== B∆∞·ªõc 4: Click ‚ÄúView Course‚Äù ·ªü admin bar =====
        view_course_link = wait.until(
            EC.element_to_be_clickable((By.CSS_SELECTOR, "#wp-admin-bar-view a"))
        )
        view_course_link.click()
        print("‚úÖ ƒê√£ m·ªü trang View Course (frontend)")

        # L∆∞u URL course frontend
        course_frontend_url = driver.current_url
        print(f"üëâ URL course frontend: {course_frontend_url}")

        # ===== B∆∞·ªõc 5: Logout admin tr∆∞·ªõc khi login student =====
        driver.get("http://learnpresshi.local/wp-login.php?action=logout")
        driver.get("http://learnpresshi.local/wp-login.php")
        time.sleep(5)

        # ===== B∆∞·ªõc 6: Login b·∫±ng student =====
        driver.get("http://learnpresshi.local/wp-login.php")  # ƒë·∫£m b·∫£o v·ªÅ trang login chu·∫©n

        username_input = wait.until(EC.element_to_be_clickable((By.ID, "user_login")))
        password_input = wait.until(EC.element_to_be_clickable((By.ID, "user_pass")))

        username_input.clear()
        password_input.clear()

        username_input.send_keys(STUDENT_USERNAME)

        # n·∫øu send_keys kh√¥ng ƒÉn th√¨ d√πng execute_script
        try:
            password_input.send_keys(STUDENT_PASSWORD)
        except:
            driver.execute_script("arguments[0].value = arguments[1];", password_input, STUDENT_PASSWORD)

        driver.find_element(By.ID, "wp-submit").click()
        time.sleep(2)
        print("‚úÖ ƒêƒÉng nh·∫≠p student th√†nh c√¥ng!")


        # ===== B∆∞·ªõc 7: Truy c·∫≠p l·∫°i course frontend ƒë√£ l∆∞u =====
        driver.get(course_frontend_url)


        # ===== B∆∞·ªõc 9: Click n√∫t "Continue" ƒë·ªÉ v√†o Lesson =====
        continue_btn = wait.until(
            EC.element_to_be_clickable((By.CSS_SELECTOR, "button.course-btn-continue"))
        )
        continue_btn.click()
        print("‚úÖ Student ƒë√£ click Continue ƒë·ªÉ v√†o b√†i h·ªçc")
        time.sleep(2)

        # ===== B∆∞·ªõc 10: Click n√∫t "Complete" trong Lesson =====
        complete_btn = wait.until(
            EC.element_to_be_clickable((By.CSS_SELECTOR, "button.lp-btn-complete-item"))
        )
        complete_btn.click()
        print("‚úÖ Student ƒë√£ click Complete Lesson, popup hi·ªán ra")

        # ===== B∆∞·ªõc 11: X√°c nh·∫≠n "Yes" trong popup Complete lesson =====
        yes_btn_complete = wait.until(
            EC.element_to_be_clickable((By.CSS_SELECTOR, ".lp-modal-footer .btn-yes"))
        )
        yes_btn_complete.click()
        print("‚úÖ Student ƒë√£ x√°c nh·∫≠n Complete Lesson")
        time.sleep(2)

        # ===== B∆∞·ªõc 12: Click n√∫t "Finish course" =====
        finish_course_btn = wait.until(
            EC.element_to_be_clickable((By.CSS_SELECTOR, "form.form-button-finish-course button.lp-btn-finish-course"))
        )
        finish_course_btn.click()
        print("‚úÖ Student ƒë√£ click Finish course, popup hi·ªán ra")

        # ===== B∆∞·ªõc 13: X√°c nh·∫≠n "Yes" trong popup Finish course =====
        yes_btn_finish = wait.until(
            EC.element_to_be_clickable((By.CSS_SELECTOR, ".lp-modal-footer .btn-yes"))
        )
        yes_btn_finish.click()
        print("üéâ Student ƒë√£ ho√†n th√†nh kh√≥a h·ªçc th√†nh c√¥ng!")
        time.sleep(2)

        # ===== B∆∞·ªõc 14: Click l·∫°i v√†o Lesson icon =====
        try:
            lesson_icon = wait.until(
                EC.element_to_be_clickable((By.CSS_SELECTOR, "span.course-item-ico.lp_lesson"))
            )
            lesson_icon.click()
            print("‚úÖ ƒê√£ click v√†o Lesson icon")
            time.sleep(2)

            # ===== B∆∞·ªõc 15: Ki·ªÉm tra th√¥ng b√°o protected content =====
            protected_message = wait.until(
                EC.presence_of_element_located((By.CSS_SELECTOR, "div.learn-press-message.learn-press-content-protected-message.error"))
            )

            if "You finished this course. This content is protected." in protected_message.text:
                print("üéâ Test Passed: Sau khi ho√†n th√†nh, lesson hi·ªÉn th·ªã th√¥ng b√°o protected ƒë√∫ng!")
            else:
                pytest.fail("‚ùå Test Failed: Kh√¥ng hi·ªÉn th·ªã th√¥ng b√°o protected mong ƒë·ª£i.")

        except Exception as e:
            pytest.fail(f"‚ùå Test Failed: Kh√¥ng t√¨m th·∫•y Lesson icon ho·∫∑c th√¥ng b√°o protected. L·ªói: {e}")


    finally:
        time.sleep(3)
        driver.quit()
